local BASE_URL = "https://love2d.org"

--- Quickhelp Documentation (ctrl-J)
-- This is called when the user invokes quick help via ctrl-j, or by
-- having the quickhelp panel open and set to autolookup
-- @param name The name to get documentation for.
-- @return the documentation as an HTML or plain text string
function getDocumentation(name)
    -- Use for development
    -- disableCache()

    local data = fetchURL(getDocumentationUrl(name))

    local contentTag = [[<div id="bodyContent">]]
    local footerTag = [[<div class="printfooter]]

    local contentPos = data:find(contentTag)
    local footerPos = data:find(footerTag)

    if contentPos == nil then
        return "<html><h3>" .. name .. "</h3>Could not load from Love wiki.<br><br><b>[data from love2d.org]</b></html>"
    end

    data = data:sub(contentPos, footerPos)

    data =  data:gsub([[href="]], [[href="]]..BASE_URL)
    data =  data:gsub([[src="]], [[src="]]..BASE_URL)

    data = "<html><h3>" .. name .. "</h3>" .. data .. "<br><br><b>[data from love2d.org]</b></html>"

    return data
end

--- External Documentation URL (shift-F1)
-- This is called by shift-F1 on the symbol, or by the
-- external documentation button on the quick help panel
-- @param name The name to get documentation for.
-- @return the URL of the external documentation
function getDocumentationUrl(name)
    return BASE_URL .. "/wiki/" .. name
end


--- Quick Navigation Tooltip Text, (ctrl-hover on symbol)
-- This is called when the user ctrl-hovers over a symbol
-- @param name The name to get documentation for.
-- @return the documentation as a plain text string
function getQuickNavigateDocumentation(name)
    local sig = SIGNATURES[name]
    if not sig then return name end
    return SIGNATURES[name]
end


SIGNATURES = {
["love.math"] = [=[love.math - Provides system-independent mathematical functions.]=],
["love.math.compress"] = [=[compress(rawstring, format, level) - Compresses a string or data using a specific compression algorithm.]=],
["love.math.decompress"] = [=[decompress(compressedData) - Decompresses a CompressedData or previously compressed string or Data object.]=],
["love.math.gammaToLinear"] = [=[gammaToLinear(r, g, b) - Converts a color from gamma-space (sRGB) to linear-space (RGB). This is useful when doing gamma-correct rendering and you need to do math in linear RGB in the few cases where LÖVE doesn't handle conversions automatically.]=],
["love.math.getRandomSeed"] = [=[getRandomSeed() - Gets the seed of the random number generator.

The state is split into two numbers due to Lua's use of doubles for all number values - doubles can't accurately represent integer values above 2^53.]=],
["love.math.getRandomState"] = [=[getRandomState() - Gets the current state of the random number generator. This returns an opaque implementation-dependent string which is only useful for later use with RandomGenerator:setState.

This is different from RandomGenerator:getSeed in that getState gets the RandomGenerator's current state, whereas getSeed gets the previously set seed number.

The value of the state string does not depend on the current operating system.]=],
["love.math.isConvex"] = [=[isConvex(vertices) - Checks whether a polygon is convex.

PolygonShapes in love.physics, some forms of Mesh, and polygons drawn with love.graphics.polygon must be simple convex polygons.]=],
["love.math.linearToGamma"] = [=[linearToGamma(lr, lg, lb) - Converts a color from linear-space (RGB) to gamma-space (sRGB). This is useful when storing linear RGB color values in an image, because the linear RGB color space has less precision than sRGB for dark colors, which can result in noticeable color banding when drawing.

In general, colors chosen based on what they look like on-screen are already in gamma-space and should not be double-converted. Colors calculated using math are often in the linear RGB space.]=],
["love.math.newBezierCurve"] = [=[newBezierCurve(vertices) - Creates a new BezierCurve object.

The number of vertices in the control polygon determines the degree of the curve, e.g. three vertices define a quadratic (degree 2) Bézier curve, four vertices define a cubic (degree 3) Bézier curve, etc.]=],
["love.math.newRandomGenerator"] = [=[newRandomGenerator() - Creates a new RandomGenerator object which is completely independent of other RandomGenerator objects and random functions.]=],
["love.math.newTransform"] = [=[newTransform() - Creates a new Transform object.]=],
["love.math.noise"] = [=[noise(x) - Generates a Simplex or Perlin noise value in 1-4 dimensions. The return value will always be the same, given the same arguments.

Simplex noise is closely related to Perlin noise. It is widely used for procedural content generation.

There are many webpages which discuss Perlin and Simplex noise in detail.]=],
["love.math.random"] = [=[random() - Generates a pseudo-random number in a platform independent manner.]=],
["love.math.randomNormal"] = [=[randomNormal(stddev, mean) - Get a normally distributed pseudo random number.]=],
["love.math.setRandomSeed"] = [=[setRandomSeed(seed) - Sets the seed of the random number generator using the specified integer number.]=],
["love.math.setRandomState"] = [=[setRandomState(state) - Gets the current state of the random number generator. This returns an opaque implementation-dependent string which is only useful for later use with RandomGenerator:setState.

This is different from RandomGenerator:getSeed in that getState gets the RandomGenerator's current state, whereas getSeed gets the previously set seed number.

The value of the state string does not depend on the current operating system.]=],
["love.math.triangulate"] = [=[triangulate(polygon) - Triangulate a simple polygon.]=],
}
