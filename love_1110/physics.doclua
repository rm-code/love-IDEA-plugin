local BASE_URL = "https://love2d.org"

--- Quickhelp Documentation (ctrl-J)
-- This is called when the user invokes quick help via ctrl-j, or by
-- having the quickhelp panel open and set to autolookup
-- @param name The name to get documentation for.
-- @return the documentation as an HTML or plain text string
function getDocumentation(name)
    -- Use for development
    -- disableCache()

    local data = fetchURL(getDocumentationUrl(name))

    local contentTag = [[<div id="bodyContent">]]
    local footerTag = [[<div class="printfooter]]

    local contentPos = data:find(contentTag)
    local footerPos = data:find(footerTag)

    if contentPos == nil then
        return "<html><h3>" .. name .. "</h3>Could not load from Love wiki.<br><br><b>[data from love2d.org]</b></html>"
    end

    data = data:sub(contentPos, footerPos)

    data =  data:gsub([[href="]], [[href="]]..BASE_URL)
    data =  data:gsub([[src="]], [[src="]]..BASE_URL)

    data = "<html><h3>" .. name .. "</h3>" .. data .. "<br><br><b>[data from love2d.org]</b></html>"

    return data
end

--- External Documentation URL (shift-F1)
-- This is called by shift-F1 on the symbol, or by the
-- external documentation button on the quick help panel
-- @param name The name to get documentation for.
-- @return the URL of the external documentation
function getDocumentationUrl(name)
    return BASE_URL .. "/wiki/" .. name
end


--- Quick Navigation Tooltip Text, (ctrl-hover on symbol)
-- This is called when the user ctrl-hovers over a symbol
-- @param name The name to get documentation for.
-- @return the documentation as a plain text string
function getQuickNavigateDocumentation(name)
    local sig = SIGNATURES[name]
    if not sig then return name end
    return SIGNATURES[name]
end


SIGNATURES = {
["love.physics"] = [=[love.physics - Can simulate 2D rigid body physics in a realistic manner. This module is based on Box2D, and this API corresponds to the Box2D API as closely as possible.]=],
["love.physics.getDistance"] = [=[getDistance(fixture1, fixture2) - Returns the two closest points between two fixtures and their distance.]=],
["love.physics.getMeter"] = [=[getMeter() - Get the scale of the world.

The world scale is the number of pixels per meter. Try to keep your shape sizes less than 10 times this scale.

This is important because the physics in Box2D is tuned to work well for objects of size 0.1m up to 10m. All physics coordinates are divided by this number for the physics calculations.]=],
["love.physics.newBody"] = [=[newBody(world, x, y, type) - Creates a new body.

There are three types of bodies. Static bodies do not move, have a infinite mass, and can be used for level boundaries. Dynamic bodies are the main actors in the simulation, they collide with everything. Kinematic bodies do not react to forces and only collide with dynamic bodies.

The mass of the body gets calculated when a Fixture is attached or removed, but can be changed at any time with Body:setMass or Body:resetMassData.]=],
["love.physics.newChainShape"] = [=[newChainShape(loop, x1, y1, x2, y2, ...) - Creates a new ChainShape.]=],
["love.physics.newCircleShape"] = [=[newCircleShape(radius) - Creates a new CircleShape.]=],
["love.physics.newDistanceJoint"] = [=[newDistanceJoint(body1, body2, x1, y1, x2, y2, collideConnected) - Create a distance joint between two bodies.

This joint constrains the distance between two points on two bodies to be constant. These two points are specified in world coordinates and the two bodies are assumed to be in place when this joint is created. The first anchor point is connected to the first body and the second to the second body, and the points define the length of the distance joint.]=],
["love.physics.newEdgeShape"] = [=[newEdgeShape(x1, y1, x2, y2) - Creates a edge shape.]=],
["love.physics.newFixture"] = [=[newFixture(body, shape, density) - Creates and attaches a Fixture to a body.]=],
["love.physics.newFrictionJoint"] = [=[newFrictionJoint(body1, body2, x, y, collideConnected) - Create a friction joint between two bodies. A FrictionJoint applies friction to a body.]=],
["love.physics.newGearJoint"] = [=[newGearJoint(joint1, joint2, ratio, collideConnected) - Create a gear joint connecting two joints.

The gear joint connects two joints that must be either prismatic or revolute joints. Using this joint requires that the joints it uses connect their respective bodies to the ground and have the ground as the first body. When destroying the bodies and joints you must make sure you destroy the gear joint before the other joints.

The gear joint has a ratio the determines how the angular or distance values of the connected joints relate to each other. The formula coordinate1 + ratio * coordinate2 always has a constant value that is set when the gear joint is created.]=],
["love.physics.newMotorJoint"] = [=[newMotorJoint(body1, body2, correctionFactor) - Creates a joint between two bodies which controls the relative motion between them.

Position and rotation offsets can be specified once the MotorJoint has been created, as well as the maximum motor force and torque that will be be applied to reach the target offsets.]=],
["love.physics.newMouseJoint"] = [=[newMouseJoint(body, x, y) - Create a joint between a body and the mouse.

This joint actually connects the body to a fixed point in the world. To make it follow the mouse, the fixed point must be updated every timestep (example below).

The advantage of using a MouseJoint instead of just changing a body position directly is that collisions and reactions to other joints are handled by the physics engine.]=],
["love.physics.newPolygonShape"] = [=[newPolygonShape(x1, y1, x2, y2, ...) - Creates a new PolygonShape.

This shape can have 8 vertices at most, and must form a convex shape.]=],
["love.physics.newPrismaticJoint"] = [=[newPrismaticJoint(body1, body2, x, y, ax, ay, collideConnected) - Create a prismatic joints between two bodies.

A prismatic joint constrains two bodies to move relatively to each other on a specified axis. It does not allow for relative rotation. Its definition and operation are similar to a revolute joint, but with translation and force substituted for angle and torque.]=],
["love.physics.newPulleyJoint"] = [=[newPulleyJoint(body1, body2, gx1, gy1, gx2, gy2, x1, y1, x2, y2, ratio, collideConnected) - Create a pulley joint to join two bodies to each other and the ground.

The pulley joint simulates a pulley with an optional block and tackle. If the ratio parameter has a value different from one, then the simulated rope extends faster on one side than the other. In a pulley joint the total length of the simulated rope is the constant length1 + ratio * length2, which is set when the pulley joint is created.

Pulley joints can behave unpredictably if one side is fully extended. It is recommended that the method setMaxLengths  be used to constrain the maximum lengths each side can attain.]=],
["love.physics.newRectangleShape"] = [=[newRectangleShape(width, height) - Shorthand for creating rectangular PolygonShapes.

By default, the local origin is located at the center of the rectangle as opposed to the top left for graphics.]=],
["love.physics.newRevoluteJoint"] = [=[newRevoluteJoint(body1, body2, x, y, collideConnected) - Creates a pivot joint between two bodies.

This joint connects two bodies to a point around which they can pivot.]=],
["love.physics.newRopeJoint"] = [=[newRopeJoint(body1, body2, x1, y1, x2, y2, maxLength, collideConnected) - Create a joint between two bodies. Its only function is enforcing a max distance between these bodies.]=],
["love.physics.newWeldJoint"] = [=[newWeldJoint(body1, body2, x, y, collideConnected) - Creates a constraint joint between two bodies. A WeldJoint essentially glues two bodies together. The constraint is a bit soft, however, due to Box2D's iterative solver.]=],
["love.physics.newWheelJoint"] = [=[newWheelJoint(body1, body2, x, y, ax, ay, collideConnected) - Creates a wheel joint.]=],
["love.physics.newWorld"] = [=[newWorld(xg, yg, sleep) - Creates a new World.]=],
["love.physics.setMeter"] = [=[setMeter(scale) - Sets the pixels to meter scale factor.

All coordinates in the physics module are divided by this number and converted to meters, and it creates a convenient way to draw the objects directly to the screen without the need for graphics transformations.

It is recommended to create shapes no larger than 10 times the scale. This is important because Box2D is tuned to work well with shape sizes from 0.1 to 10 meters. The default meter scale is 30.

love.physics.setMeter does not apply retroactively to created objects. Created objects retain their meter coordinates but the scale factor will affect their pixel coordinates.]=],
}
