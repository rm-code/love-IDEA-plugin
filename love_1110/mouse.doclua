local BASE_URL = "https://love2d.org"

--- Quickhelp Documentation (ctrl-J)
-- This is called when the user invokes quick help via ctrl-j, or by
-- having the quickhelp panel open and set to autolookup
-- @param name The name to get documentation for.
-- @return the documentation as an HTML or plain text string
function getDocumentation(name)
    -- Use for development
    -- disableCache()

    local data = fetchURL(getDocumentationUrl(name))

    local contentTag = [[<div id="bodyContent">]]
    local footerTag = [[<div class="printfooter]]

    local contentPos = data:find(contentTag)
    local footerPos = data:find(footerTag)

    if contentPos == nil then
        return "<html><h3>" .. name .. "</h3>Could not load from Love wiki.<br><br><b>[data from love2d.org]</b></html>"
    end

    data = data:sub(contentPos, footerPos)

    data =  data:gsub([[href="]], [[href="]]..BASE_URL)
    data =  data:gsub([[src="]], [[src="]]..BASE_URL)

    data = "<html><h3>" .. name .. "</h3>" .. data .. "<br><br><b>[data from love2d.org]</b></html>"

    return data
end

--- External Documentation URL (shift-F1)
-- This is called by shift-F1 on the symbol, or by the
-- external documentation button on the quick help panel
-- @param name The name to get documentation for.
-- @return the URL of the external documentation
function getDocumentationUrl(name)
    return BASE_URL .. "/wiki/" .. name
end


--- Quick Navigation Tooltip Text, (ctrl-hover on symbol)
-- This is called when the user ctrl-hovers over a symbol
-- @param name The name to get documentation for.
-- @return the documentation as a plain text string
function getQuickNavigateDocumentation(name)
    local sig = SIGNATURES[name]
    if not sig then return name end
    return SIGNATURES[name]
end


SIGNATURES = {
["love.mouse"] = [=[love.mouse - Provides an interface to the user's mouse.]=],
["love.mouse.getCursor"] = [=[getCursor() - Gets the current Cursor.]=],
["love.mouse.getPosition"] = [=[getPosition() - Returns the current position of the mouse.]=],
["love.mouse.getRelativeMode"] = [=[getRelativeMode() - Gets whether relative mode is enabled for the mouse.

If relative mode is enabled, the cursor is hidden and doesn't move when the mouse does, but relative mouse motion events are still generated via love.mousemoved. This lets the mouse move in any direction indefinitely without the cursor getting stuck at the edges of the screen.

The reported position of the mouse is not updated while relative mode is enabled, even when relative mouse motion events are generated.]=],
["love.mouse.getSystemCursor"] = [=[getSystemCursor(ctype) - Gets a Cursor object representing a system-native hardware cursor.

 Hardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates.]=],
["love.mouse.getX"] = [=[getX() - Returns the current x position of the mouse.]=],
["love.mouse.getY"] = [=[getY() - Returns the current y position of the mouse.]=],
["love.mouse.hasCursor"] = [=[hasCursor() - Gets whether cursor functionality is supported.

If it isn't supported, calling love.mouse.newCursor and love.mouse.getSystemCursor will cause an error. Mobile devices do not support cursors.]=],
["love.mouse.isCursorSupported"] = [=[isCursorSupported() - Gets whether cursor functionality is supported.

If it isn't supported, calling love.mouse.newCursor and love.mouse.getSystemCursor will cause an error. Mobile devices do not support cursors.]=],
["love.mouse.isDown"] = [=[isDown(button, ...) - Checks whether a certain mouse button is down. This function does not detect mousewheel scrolling; you must use the love.wheelmoved (or love.mousepressed in version 0.9.2 and older) callback for that.]=],
["love.mouse.isGrabbed"] = [=[isGrabbed() - Checks if the mouse is grabbed.]=],
["love.mouse.isVisible"] = [=[isVisible() - Checks if the cursor is visible.]=],
["love.mouse.newCursor"] = [=[newCursor(imageData, hotx, hoty) - Creates a new hardware Cursor object from an image file or ImageData.

Hardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates.

The hot spot is the point the operating system uses to determine what was clicked and at what position the mouse cursor is. For example, the normal arrow pointer normally has its hot spot at the top left of the image, but a crosshair cursor might have it in the middle.]=],
["love.mouse.setCursor"] = [=[setCursor() - Sets the current mouse cursor.

Resets the current mouse cursor to the default when called without arguments.]=],
["love.mouse.setGrabbed"] = [=[setGrabbed(grab) - Grabs the mouse and confines it to the window.]=],
["love.mouse.setPosition"] = [=[setPosition(x, y) - Sets the current position of the mouse. Non-integer values are floored.]=],
["love.mouse.setRelativeMode"] = [=[setRelativeMode(enable) - Sets whether relative mode is enabled for the mouse.

When relative mode is enabled, the cursor is hidden and doesn't move when the mouse does, but relative mouse motion events are still generated via love.mousemoved. This lets the mouse move in any direction indefinitely without the cursor getting stuck at the edges of the screen.

The reported position of the mouse is not updated while relative mode is enabled, even when relative mouse motion events are generated.]=],
["love.mouse.setVisible"] = [=[setVisible(visible) - Sets the visibility of the cursor.]=],
["love.mouse.setX"] = [=[setX(x) - Sets the current X position of the mouse. Non-integer values are floored.]=],
["love.mouse.setY"] = [=[setY(y) - Sets the current Y position of the mouse. Non-integer values are floored.]=],
}
